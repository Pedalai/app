//Início de APP

/**
 * Singleton Pattern
 * O seu projeto JS em um objeto literal (JSON)
 * Sugerido por: Dennis Calazans
 * Veja mais em www.denniscalazans.com/js
 * 
 * Problema 
 * Como modularizar o meu projeto, proteger a estrutura, tornar o código manutenível?
 * 
 * Solução
 * Criar apenas uma variável global e utilizar notação de objeto
 * 
 * Quando aplicar
 * Projetos pequenos - Como ferramenta para namespace.
 * Projetos médios - Como forma de agrupar códigos relacionados.
 * Projetos grandes e complexos - Como ferramenta de otimização  (Ver Pro JavaScript Design Patterns, capítulo 5).
 *
 * Algumas sugestões para organização:
 *  
 * Atributos - começam com _ e caixa baixa, segue com o padrão camelCase
 * APP._titulo = "Atributos começam com _";
 *
 * Métodos - começam com caixa baixa, segue com padrão camelCase
 * APP.retornarTitulo = function() {
 *	return this._titulo;
 * }
 * 
 * Módulos - começam com caixa alta, segue com padrão camelCase
 *  APP.Mudulo = {
 * 		_atributo: "valor" 
 * }
 * 
 * Agradecimento a os meus alunos e amigos que vem trabalhando 
 * e contribuindo para o desenvolvimento desta iniciativa:
 * Bruno Mota, Brenda, Ciclone, Pablo, Leonardo, Ricardo, Júlio Melo, Klayton
 **/

//Existe APP? Sim. Então usa. Não. Então cria.
var APP = APP || {};

//Propriedade que será executa em todos os módulos
APP._nameSpace = "APP";

//Inicia o APP
APP.iniciar = function(Modulos) {
	var quantidadeDeModulos = arguments.length;

	//Se algum Modulo for especificado, executa o setUp de App	
	if(Modulos !== undefined && Modulos !== APP) {
		APP.setUp();
	}

	//Caso o Modulo seja omitido, TODOS os módulos de APP serão iniciados
	if(quantidadeDeModulos == 0 || quantidadeDeModulos == 1) {
		this.iniciarModulos(Modulos || APP);
	} else if(quantidadeDeModulos > 1) {
		APP.iniciarModulos.apply(this, arguments);
	}
};

//Quando o APP for iniciado
APP.setUp = function() {
	//console.debug('APP iniciado');
};

//Inicia todos os módulos
APP.iniciarModulos = function(Modulo) {
	var Filho, i=0;

	if(arguments.length > 1) {

		for(;i<arguments.length;i++) {
			APP.iniciarModulos(arguments[i]);
		} 
		return;
	}


	if(typeof Modulo != "object") return false;

	//Executa o método construtor do módulo, se existir
	if(Modulo.hasOwnProperty('setUp') && typeof Modulo.setUp == "function") {
		Modulo.setUp();
	} else {
		//Evita que durante a execução dos setUp, objetos inseridos na estrutura, 
		//ampliem a verificação iterativa
		return false;
	}

	//Procura por Sub Módulos para fazer a mesma coisa
	for(Filho in Modulo) {


		if(Modulo.hasOwnProperty(Filho) === true) {
			if(Modulo[Filho] !== null && typeof Modulo[Filho] == "object") {

				//Permite a navegação em níveis superiores do namespace
				Modulo[Filho]['pai'] = function() {
					return Modulo;
				};


				//Cria em cada módulo a propriedade _nameSpace
				//Ex: App.Contato.Formulario._nameSpace = App.Contato.Formulario
				Modulo[Filho]['_nameSpace'] = (Modulo['_nameSpace'] || "APP") + '.'+Filho;


				APP.iniciarModulos(Modulo[Filho]);
			}
		}
	}

	return false;
};

/**
 *	Retorna o valor da propriedade (nó) informado.
 *  Ex 1: 
 * 		APP.nameSpace("APP.ModuloPai.ModuloFilho");
 * 		Retornará: APP.ModuloPai.ModuloFilho
 * 
 * 	Caso o nó seja um método, ele será executado.
 *	É possível passar parâmetros 
 *
 * 	Ex 2: APP.Calculadora.somar = function(a, b) { return a+b; }	
 * 		
 *	APP.nameSpace("APP.Calculadora.somar", [7, 9]);
 * 		Retornará: 16
 */
APP.nameSpace = function(nameSpace, arrayDeParametros) {
	//Declaração de variáveis;
	var no, nos, escopos, alvo, i;

		//Por comodidade, se for apenas 1 parâmetro,
		 //pode passar direto, sem estar dentro de um array
		//By Pablo
		if(arrayDeParametros !== undefined && arrayDeParametros instanceof Array === false) {
			arrayDeParametros = [arrayDeParametros];
		}

		//Escopos encontrados
		escopos = [window];

		//Nós do nameSpace
		nos = nameSpace.split('.');

		//Para cada nó
		for(i=0;i<nos.length;i++) {
			no = nos[i];

			//Verifica se não é do protótipo
			if(escopos[i].hasOwnProperty(no)) {

				//Guarda o escopo encontrado
				escopos.push(escopos[i][no]);
			}
		}

		//Captura o alvo
		alvo = escopos.pop();

		//Se a última referência encontrada for uma função
		if(typeof alvo == 'function') {

			//A função é executada no escopo do alvo
			return alvo.apply(escopos.pop(), arrayDeParametros || []);

		}

		//Apenas retorna o alvo, caso não seja uma função
		else { return alvo; }
}

//FIM de APP
// módulo que obtem a localização do usuário e ativa o método que cria o mapa

var APP = APP || {};

APP.Geolocation = {
  _latitude: null,
  _longitude: null,

  setUp: function(){
    var that = this;

    that.getLocation();
  },

  // obtem a posição do usuário
  getLocation: function(){
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(APP.Geolocation.saveLocation, APP.Geolocation.showError);
    } else {
      console.log('Geolocalização não é suportada!');
    }
  },

  // guarda a posição do usuário para consultas globais
  saveLocation: function(dataPosition){
    APP.Geolocation._latitude  = dataPosition.coords.latitude;
    APP.Geolocation._longitude = dataPosition.coords.longitude;

    // ativa o método que cria o mapa
    APP.Geolocation._latitude  !== null && 
    APP.Geolocation._longitude !== null ? APP.Geolocation.Home.Map.createMap() : APP.Geolocation.getLocation();
  },

  showError: function(error){
    console.log(error);
  }
}
var APP = APP || {};
var Geolocation = APP || {};

APP.Geolocation.Home = {
  setUp: function(){
    var that = this;
  },

  Map: {
    _map: null,

    setUp: function(){
      
    },

    // método que cria o mapa e marca a posição do usuário
    createMap: function(){
      var that       = this,
          latitude   = APP.Geolocation._latitude,
          longitude  = APP.Geolocation._longitude,
          myLatlng   = new google.maps.LatLng(latitude, longitude),
          
          mapOptions = {
            zoom: 12,
            center: myLatlng,
            panControl: false,
            // scrollwheel: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: [
              {
                stylers: [
                  { saturation: -70 },
                ]
              }
            ]
          },

          image = 'http://google-maps-icons.googlecode.com/files/cycling.png'.

          marker;

      // exibir o mapa no elemento html;
      that._map = new google.maps.Map(document.getElementById('map'), mapOptions);

      // marcador personalizado;
      image = 'http://google-maps-icons.googlecode.com/files/cycling.png';

      marker = new google.maps.Marker({
        position: myLatlng,
        map: that._map,
        icon: image,
        // animation: google.maps.Animation.BOUNCE
      });

      var myOptions = {
        content: '<h1>Você está aqui!</h1>',
        disableAutoPan: false,
        maxWidth: 0,
        pixelOffset: new google.maps.Size(-85, 0),
        zIndex: null,
        boxStyle: { 
          marginTop: '10px',
          width: '170px'
        },
        closeBoxMargin: "0 2px 2px 2px",
        closeBoxURL: "http://www.google.com/intl/en_us/mapfiles/close.gif",
        infoBoxClearance: new google.maps.Size(1, 1),
        isHidden: false,
        pane: "floatPane",
        enableEventPropagation: false
      };

      var infobox = new InfoBox(myOptions);
      infobox.open(that.pai().Map._map, marker);

      // ativa o método que cria as ciclofaixas depois que o mapa é criado
      if (that._map !== null) {
        if (that.pai().Cycle._objCycle === null) {
          that.pai().Cycle.makeCycleway();
        }
      };
    }
  },

  Cycle: {
    _objCycle: null,

    // método que cria as ciclofaixas, ciclovias e rotas de bicicletas
    makeCycleway: function(){
      var that = this,
          path = 'proxy.php',
          request = $.when(APP.Request.makeRequest(path));

      request.done(function(response){
        var i = 0, c, countFeatures, countCoordinates,
            colors = [
              "#FF0000",
              "#00FF00",
              "#0000FF",
              "#622b06",
              "#000000",
              "#79790b",
              "#1d628e",
              "#FF00FF",
              "#00ff84",
              "#0000ff",
              "#000",
              "#9600ff",
              "#08541a",
              "#e37906"
          ];

        that._objCycle = response;

        $.each(that._objCycle, function(idx, value){
          var DrivePath = [],
            coordinates = value.geometry;

          for (c = 0, countCoordinates = coordinates.length; c < countCoordinates; c = c+1) {
            var coordinate = coordinates[c],
            latitude = coordinate[1],
            longitude = coordinate[0];

            DrivePath.push(new google.maps.LatLng(latitude, longitude));
          }

          var PathStyle = new google.maps.Polyline({
            path: DrivePath,
            strokeColor: colors[i],
            strokeOpacity: 1.0,
            strokeWeight: 3,
            map: that.pai().Map._map,
            id: value.id
          });

          PathStyle.setMap(that.pai().Map._map);

          var customMarker = new google.maps.Marker({
            position: new google.maps.LatLng(DrivePath[0].k, DrivePath[0].B),
            map: that.pai().Map._map,
            id: value.id,
            icon: 'src/images/location.svg'
          });

          var boxText = '<h1 class="title-info">' + value.name + '</h1>' +
                      '<h2 class="distance-info">' + value.distance + ' km de distância</h2>' +
                      '<a class="link-info">Pedalar até aqui</a>';

          var myOptions = {
            content: boxText,
            disableAutoPan: false,
            maxWidth: 0,
            pixelOffset: new google.maps.Size(-140, 0),
            zIndex: null,
            boxStyle: { 
              marginTop: '13px',
              width: '280px'
            },
            closeBoxMargin: "0 2px 2px 2px",
            closeBoxURL: "http://www.google.com/intl/en_us/mapfiles/close.gif",
            infoBoxClearance: new google.maps.Size(1, 1),
            isHidden: false,
            pane: "floatPane",
            enableEventPropagation: false
          };

          var infobox = new InfoBox(myOptions),
              markerSelected;

          google.maps.event.addListener(customMarker, 'click', (function(customMarker, i) {

            return function() {
              infobox.open(that.pai().Map._map, customMarker);
              markerSelected = customMarker;
            }

          })(customMarker));

          google.maps.event.addListener(infobox, 'domready', function () {
            $('.infoBox').on('click', '.link-info', function(event){
              var element = event.currentTarget,

                  rendererOptions = {
                    draggable: true
                  },
                  directionsService = new google.maps.DirectionsService(),
                  directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);

                  directionsDisplay.setMap(that.pai().Map._map);

                  var start = new google.maps.LatLng(APP.Geolocation._latitude, APP.Geolocation._longitude),
                      end = new google.maps.LatLng(markerSelected.position.k, markerSelected.position.B),
                      request = {
                        origin: start,
                        destination: end,
                        travelMode: google.maps.TravelMode.DRIVING
                      };
              
                  directionsService.route(request, function(response, status) {
                    if (status == google.maps.DirectionsStatus.OK) {console.log(response);
                      directionsDisplay.setDirections(response);
                    }
                  });

              event.preventDefault();
            });
          });

          // $('#main-section').on('click', '.locais-item', function(event){
          //   var id = $(event.currentTarget).attr('id');

          //   customMarker.setVisible(false);
          //   $('#main-section').empty().css('z-index', '-999999');

          //   if (customMarker.id == id) {

          //     customMarker.setVisible(true);
          //     infowindow.open(that.pai().Map._map, customMarker);
          //   }
          // });

          // $('.right-small').on('click', function(event){
          //   customMarker.setVisible(true);
          // });

          i++;
        });
      });
    }
  }
}
var APP = APP || {};

APP.Request = {
  makeRequest: function(url){
    return $.ajax({
      url: url,
      dataType: 'json',
      beforeSend: function(){
        console.log('Carregando...');
      },
      complete: function(){
        console.log('Carregou!');
      }
    });
  }
}