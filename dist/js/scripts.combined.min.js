//Início de APP

/**
 * Singleton Pattern
 * O seu projeto JS em um objeto literal (JSON)
 * Sugerido por: Dennis Calazans
 * Veja mais em www.denniscalazans.com/js
 * 
 * Problema 
 * Como modularizar o meu projeto, proteger a estrutura, tornar o código manutenível?
 * 
 * Solução
 * Criar apenas uma variável global e utilizar notação de objeto
 * 
 * Quando aplicar
 * Projetos pequenos - Como ferramenta para namespace.
 * Projetos médios - Como forma de agrupar códigos relacionados.
 * Projetos grandes e complexos - Como ferramenta de otimização  (Ver Pro JavaScript Design Patterns, capítulo 5).
 *
 * Algumas sugestões para organização:
 *  
 * Atributos - começam com _ e caixa baixa, segue com o padrão camelCase
 * APP._titulo = "Atributos começam com _";
 *
 * Métodos - começam com caixa baixa, segue com padrão camelCase
 * APP.retornarTitulo = function() {
 *	return this._titulo;
 * }
 * 
 * Módulos - começam com caixa alta, segue com padrão camelCase
 *  APP.Mudulo = {
 * 		_atributo: "valor" 
 * }
 * 
 * Agradecimento a os meus alunos e amigos que vem trabalhando 
 * e contribuindo para o desenvolvimento desta iniciativa:
 * Bruno Mota, Brenda, Ciclone, Pablo, Leonardo, Ricardo, Júlio Melo, Klayton
 **/

//Existe APP? Sim. Então usa. Não. Então cria.
var APP = APP || {};

//Propriedade que será executa em todos os módulos
APP._nameSpace = "APP";

//Inicia o APP
APP.iniciar = function(Modulos) {
	var quantidadeDeModulos = arguments.length;

	//Se algum Modulo for especificado, executa o setUp de App	
	if(Modulos !== undefined && Modulos !== APP) {
		APP.setUp();
	}

	//Caso o Modulo seja omitido, TODOS os módulos de APP serão iniciados
	if(quantidadeDeModulos == 0 || quantidadeDeModulos == 1) {
		this.iniciarModulos(Modulos || APP);
	} else if(quantidadeDeModulos > 1) {
		APP.iniciarModulos.apply(this, arguments);
	}
};

//Quando o APP for iniciado
APP.setUp = function() {
	//console.debug('APP iniciado');
};

//Inicia todos os módulos
APP.iniciarModulos = function(Modulo) {
	var Filho, i=0;

	if(arguments.length > 1) {

		for(;i<arguments.length;i++) {
			APP.iniciarModulos(arguments[i]);
		} 
		return;
	}


	if(typeof Modulo != "object") return false;

	//Executa o método construtor do módulo, se existir
	if(Modulo.hasOwnProperty('setUp') && typeof Modulo.setUp == "function") {
		Modulo.setUp();
	} else {
		//Evita que durante a execução dos setUp, objetos inseridos na estrutura, 
		//ampliem a verificação iterativa
		return false;
	}

	//Procura por Sub Módulos para fazer a mesma coisa
	for(Filho in Modulo) {


		if(Modulo.hasOwnProperty(Filho) === true) {
			if(Modulo[Filho] !== null && typeof Modulo[Filho] == "object") {

				//Permite a navegação em níveis superiores do namespace
				Modulo[Filho]['pai'] = function() {
					return Modulo;
				};


				//Cria em cada módulo a propriedade _nameSpace
				//Ex: App.Contato.Formulario._nameSpace = App.Contato.Formulario
				Modulo[Filho]['_nameSpace'] = (Modulo['_nameSpace'] || "APP") + '.'+Filho;


				APP.iniciarModulos(Modulo[Filho]);
			}
		}
	}

	return false;
};

/**
 *	Retorna o valor da propriedade (nó) informado.
 *  Ex 1: 
 * 		APP.nameSpace("APP.ModuloPai.ModuloFilho");
 * 		Retornará: APP.ModuloPai.ModuloFilho
 * 
 * 	Caso o nó seja um método, ele será executado.
 *	É possível passar parâmetros 
 *
 * 	Ex 2: APP.Calculadora.somar = function(a, b) { return a+b; }	
 * 		
 *	APP.nameSpace("APP.Calculadora.somar", [7, 9]);
 * 		Retornará: 16
 */
APP.nameSpace = function(nameSpace, arrayDeParametros) {
	//Declaração de variáveis;
	var no, nos, escopos, alvo, i;

		//Por comodidade, se for apenas 1 parâmetro,
		 //pode passar direto, sem estar dentro de um array
		//By Pablo
		if(arrayDeParametros !== undefined && arrayDeParametros instanceof Array === false) {
			arrayDeParametros = [arrayDeParametros];
		}

		//Escopos encontrados
		escopos = [window];

		//Nós do nameSpace
		nos = nameSpace.split('.');

		//Para cada nó
		for(i=0;i<nos.length;i++) {
			no = nos[i];

			//Verifica se não é do protótipo
			if(escopos[i].hasOwnProperty(no)) {

				//Guarda o escopo encontrado
				escopos.push(escopos[i][no]);
			}
		}

		//Captura o alvo
		alvo = escopos.pop();

		//Se a última referência encontrada for uma função
		if(typeof alvo == 'function') {

			//A função é executada no escopo do alvo
			return alvo.apply(escopos.pop(), arrayDeParametros || []);

		}

		//Apenas retorna o alvo, caso não seja uma função
		else { return alvo; }
}

//FIM de APP
var APP = APP || {};

APP.Home = {
  _map: null,

  setUp: function(){
    var that = this;
    that.initialize();
    that.getData();
  },

  initialize: function() {
    var that = this;

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(success, error, options);
    } else {
      error('Não suportado!');
    }

    var options = {
      enableHighAccuracy: true,
      timeout: 5000,
      maximumAge: 0
    };

    function success(position) {
      // como coordenadas passo o retorno da API (position.coords.latitude, position.coords.longitude)
      var myLatlng = new google.maps.LatLng(-8.031030, -34.871268);

      // Parâmetros do mapa
      var mapOptions = {
        zoom: 12,
        center: myLatlng,
        panControl: false,
        scrollwheel: false,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      }

       // Parâmetros do texto que será exibido no clique;
       var contentString = '<h2>Você está aqui</h2>' +
       '<p>Este foi um exemplo de como pegar a geolocalização do usuário</p>';
       var infowindow = new google.maps.InfoWindow({
        content: contentString,
        maxWidth: 750
      });

      // Exibir o mapa na div #mapuser;
      that._map = new google.maps.Map(document.getElementById('map'), mapOptions);

      // Marcador personalizado;
      var image = 'http://google-maps-icons.googlecode.com/files/cycling.png';
      var marcadorPersonalizado = new google.maps.Marker({
        position: myLatlng,
        map: that._map,
        icon: image,
        animation: google.maps.Animation.BOUNCE
      });

      // Exibir texto ao clicar no pin;
      google.maps.event.addListener(marcadorPersonalizado, 'click', function() {
        infowindow.open(that._map,marcadorPersonalizado);
      });

    }

    // Função de error caso o navegador não suporte a geolocalização
    function error(msg) {
      console.log("Erro é: " + navigator.geolocalização);
    }
  },

  getData: function() {
    var that = this;

    $.ajax({
    url: 'proxy.php',
    dataType: 'JSON',
      beforeSend: function() {
        console.log("Carregando...");
      },
      complete: function(){
        console.log("Carregou!!!");
      },
      success: function(pontos) {
        var arrCiclo = pontos,
            i = 0, c, countFeatures, countCoordinates,

            colors = [
              "#FF0000", 
              "#00FF00", 
              "#0000FF", 
              "#622b06", 
              "#000000", 
              "#79790b", 
              "#1d628e", 
              "#FF00FF",
              "#00ff84",
              "#0000ff",
              "#000",
              "#9600ff",
              "#08541a",
              "#e37906"
          ];

          setTimeout(function(){
              $.each(arrCiclo, function(idx, value){
                var DrivePath = [],
                  coordinates = value.geometry;

                for (c = 0, countCoordinates = coordinates.length; c < countCoordinates; c = c+1) {
                  var coordinate = coordinates[c],
                  latitude = coordinate[1],
                  longitude = coordinate[0];

                  DrivePath.push(new google.maps.LatLng(latitude, longitude));
                }

                var PathStyle = new google.maps.Polyline({
                  path: DrivePath,
                  strokeColor: colors[i],
                  strokeOpacity: 1.0,
                  strokeWeight: 2,
                  map: that._map,
                  id: value.id
                });

                PathStyle.setMap(that._map);

                var marcadorPersonalizado = new google.maps.Marker({
                  position: new google.maps.LatLng(DrivePath[0].k, DrivePath[0].B),
                  map: that._map,
                  id: value.id
                  // icon: image,
                });

                // var infowindow = new google.maps.InfoWindow({
                //     content: '<h1 class="title-info">' + value.name + '</h1>' + 
                //             '<h2 class="distance-info">' + value.distance + ' km de distância</h2>' + 
                //             '<a class="link-info">Pedalar até aqui</a>',
                //     id: value.id,
                //     maxWidth: 170
                // });
                
                // infowindow.setPosition(new google.maps.LatLng(DrivePath[0].k, DrivePath[0].B));
                // infowindow.open(that._map);

                var infowindow = new google.maps.InfoWindow();

                google.maps.event.addListener(marcadorPersonalizado, 'click', (function(marcadorPersonalizado, i) {
                  
                  return function() {
                    infowindow.setContent(

                      '<h1 class="title-info">' + value.name + '</h1>' + 
                            '<h2 class="distance-info">' + value.distance + ' km de distância</h2>' + 
                            '<a class="link-info">Pedalar até aqui</a>'
                      
                    );
                    
                    infowindow.open(that._map, marcadorPersonalizado);
                  }

              })(marcadorPersonalizado));

                $('#main-section').on('click', '.locais-item', function(event){
                  var id = $(event.currentTarget).attr('id');

                  marcadorPersonalizado.setVisible(false);
                  $('#main-section').empty().css('z-index', '-999999');

                  if (marcadorPersonalizado.id == id) {
                    
                    marcadorPersonalizado.setVisible(true);
                    infowindow.open(that._map, marcadorPersonalizado);
                  }
                });

                $('.right-small').on('click', function(event){
                  marcadorPersonalizado.setVisible(true);
                });

                i++;
              });
    }, 1000);

          // for (i = 0, countFeatures = arrCiclo.length; i < countFeatures; i = i+1) {
          //   var objCiclo = arrCiclo[i],
          //   coordinates = objCiclo.geometry.coordinates;

          //   var DrivePath = [];

          //   for (c = 0, countCoordinates = coordinates.length; c < countCoordinates; c = c+1) {
          //     var coordinate = coordinates[c],
          //     latitude = coordinate[1],
          //     longitude = coordinate[0];

          //     DrivePath.push(new google.maps.LatLng(latitude, longitude));
          //   }

          //   var PathStyle = new google.maps.Polyline({
          //     path: DrivePath,
          //     strokeColor: colors[i],
          //     strokeOpacity: 1.0,
          //     strokeWeight: 2,
          //     map: that._map,
          //     id: objCiclo.id
          //   });

          //   PathStyle.setMap(that._map);

          //   var infowindow = new google.maps.InfoWindow({
          //       content: '<h1 class="title-info">' + objCiclo.properties.Name + '</h1>',
          //       id: objCiclo.id
          //   });
            
          //   infowindow.setPosition(new google.maps.LatLng(DrivePath[0].k, DrivePath[0].B));
          //   infowindow.open(that._map);

          // }

      },
      error: function() {
        console.log("Error!");
      }
    });
  }
}
var APP = APP || {};

APP.Sozinho = {
  setUp: function() {
    var that = this,
     alone = document.querySelector('a.alone'),
     section = document.querySelector('#main-section');

    $(alone).on('click', function(event) {
      event.preventDefault();
      that.getData(); // call request
      section.innerHTML = " "; //empty section
      section.style.zIndex = "1";
    });
  },

  getData: function() {
    var body = document.querySelector("body");

    $.ajax({
      url: "proxySozinho.php",
      dataType: "JSON",
      beforeSend: function() {
        body.classList.add('loading');
      },

      success: function(locais) {
        body.classList.remove('loading');
        var ul = document.createElement('ul');

        $.each(locais, function(key, local) {
          var local = local,
              id = local.id,
              distance = local.distance,
              name = local.name,
              type = local.type;

              // pegando body criando os elementos
              var section = document.querySelector('#main-section'),
                  li = document.createElement('li'),
                  h5 = document.createElement('h5'),
                  p = document.createElement('p');
                  span = document.createElement('span');

              // adicionando classes
              ul.classList.add('locais-list');
              ul.id = 'locais-list';
              li.classList.add('locais-item');
              h5.classList.add('locais-nome');
              p.classList.add('locais-distancia');
              span.classList.add('locais-tipo');

              // append
              section.appendChild(ul);
              ul.appendChild(li);
              li.appendChild(h5);
              li.appendChild(p);
              li.appendChild(span);

              // insert data
              li.id = id;
              h5.innerHTML = name;
              p.innerHTML = 'Aprox. ' + distance + ' km de distância';
              span.innerHTML = type;

              // check type
              if (type == 'PraÇa') {
                span.classList.add('praca');
              } else if (type == 'Ciclovia') {
                span.classList.add('ciclovia')
              } else if (type == 'Ciclofaixa') {
                span.classList.add('ciclofaixa')
              } else if (type == 'Rota') {
                span.classList.add('rota');
              } else if (type == 'Parque') {
                span.classList.add('parque');
              } else if (type == 'Ciclofaixa Móvel') {
                span.classList.add('ciclofaixa-movel');
              }
        });

      },

      error: function() {
        body.classList.add('error');
      }
    });
  }

}
var APP = APP || {};

APP.Groups = {
  setUp: function() {
    var that = this,
        group = document.querySelector('a.group'),
        section = document.querySelector('#main-section');

    $(group).on('click', function(event) {
      event.preventDefault();
      that.getData(); // call request
      section.innerHTML = " "; //empty section
      section.style.zIndex = "1";
    });
  },

  getData: function() {
    var body = document.querySelector("body");

    $.ajax({
      url: "proxyGroups.php",
      dataType: "JSON",
      beforeSend: function() {
        body.classList.add('loading');
      },

      success: function(groups) {
        body.classList.remove('loading');
        var ul = document.createElement('ul');

        $.each(groups, function(key, grupo) {
          // var grupo = groups;
          var id = grupo.id,
              nome = grupo.name,
              distancia = grupo.distance,
              horario = grupo.schedule,
              info = grupo.information,
              apoio = grupo.car,
              preco = grupo.price,
              level = grupo.level,
              latitude = grupo.lat,
              longitude = grupo.lon;

              // pegando body criando os elementos
              var section = document.querySelector("#main-section"),
                  li = document.createElement('li'),
                  h5 = document.createElement('h5'),
                  pDistancia = document.createElement('p');
                  pLevel = document.createElement('p');
                  spanPreco = document.createElement('span');
                  spanApoio = document.createElement('span');

              // adicionando classes
              ul.classList.add('grupos-list');
              ul.id = "grupos-list";
              li.classList.add('grupos-item');
              h5.classList.add('grupos-nome');
              pDistancia.classList.add('grupos-distancia');
              pLevel.classList.add('grupos-level');
              spanPreco.classList.add('grupos-preco');
              spanApoio.classList.add('grupos-apoio');

              // append
              section.appendChild(ul);
              ul.appendChild(li);
              li.appendChild(h5);
              li.appendChild(pDistancia);
              li.appendChild(pLevel);
              li.appendChild(spanPreco);
              li.appendChild(spanApoio);

              // insert data
              li.id = id;
              h5.innerHTML = nome;
              pDistancia.innerHTML = 'Aprox. ' + distancia + ' km de distância';
              pLevel.innerHTML = level + ' (~ ' + distancia +'km)';

              // check level
              if (level == 'intermediate') {
                pLevel.classList.add('intermediate');
              } else if (level == 'starter') {
                pLevel.classList.add('starter');
              } else if (level == 'advanced') {
                pLevel.classList.add('advanced');
              }

              // check price
              if (preco == '0') {
                spanPreco.classList.add('free');
              } else {
                spanPreco.classList.add('paid');
              }

              // check apoio
              if (apoio == '1') {
                spanApoio.classList.add('yes-apoio');
              } else {
                spanApoio.classList.add('no-apoio');
              }
        });

      },

      error: function() {
        body.classList.add('error');
      }
    });
  }

}